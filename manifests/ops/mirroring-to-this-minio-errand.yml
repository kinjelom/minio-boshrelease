---
- type: replace
  path: /instance_groups/-
  value:
    name: mirroring
    azs: [ z1 ]
    instances: 1
    lifecycle: errand
    networks: [ { name: default } ]
    vm_type: default
    stemcell: default
    jobs:
      - name: mc
        release: minio
        consumes:
          minio: { from: minio-link }
        properties:
          script: |
            set -eu
            echo "Mirroring OTHER_MINIO -> THIS_MINIO"
            # Please use root access to the OTHER_MINIO
            export MC_HOST_OTHER_MINIO="((other_minio_scheme))://((other_minio_access_key)):((other_minio_secret_key))@((other_minio_uri))"
            begin_time=$(date "+%Y-%m-%d %H:%M:%S")
            echo "migrate iam..."
            $MC_HOME/mc admin cluster iam export OTHER_MINIO
            $MC_HOME/mc admin cluster iam import THIS_MINIO OTHER_MINIO-iam-info.zip
            echo "done."
            echo "migrate buckets..."
            buckets=$($MC_HOME/mc ls OTHER_MINIO --json | $JQ_HOME/jq -r '.key')
            for bucket_ref in $buckets; do
              bucket="${bucket_ref%?}"
              echo "create bucket ${bucket}..."
              $MC_HOME/mc mb --ignore-existing THIS_MINIO/$bucket
              echo "bucket ${bucket} created"
            done
            echo "migrate buckets done."
            config_temp_file=$(mktemp --tmpdir buckets-config.XXXXXX)
            echo "copy all buckets config $config_temp_file..."
            $MC_HOME/mc admin config export OTHER_MINIO > $config_temp_file
            $MC_HOME/mc admin config import THIS_MINIO < $config_temp_file
            echo "done."
            echo "copy all buckets metadata..."
            $MC_HOME/mc admin cluster bucket export OTHER_MINIO
            $MC_HOME/mc admin cluster bucket import THIS_MINIO cluster-metadata.zip
            echo "done."
            echo "restart service THIS_MINIO..."
            $MC_HOME/mc admin service restart THIS_MINIO
            echo "done."
            echo "loop through each bucket to mirror"
            for bucket_ref in $buckets; do
              bucket="${bucket_ref%?}"
              echo "mirroring bucket ${bucket}..."
              $MC_HOME/mc mirror -q --overwrite --remove --preserve --md5 OTHER_MINIO/$bucket THIS_MINIO/$bucket
              # $MC_HOME/mc mirror -q --overwrite --newer-than 1d --preserve --md5 OTHER_MINIO/$bucket THIS_MINIO/$bucket
              # $MC_HOME/mc mirror -q --overwrite --watch --preserve --md5 OTHER_MINIO/$bucket THIS_MINIO/$bucket &
              echo "bucket ${bucket} mirrored"
            done
            echo "Waiting for all background tasks to finish..."
            wait
            end_time=$(date "+%Y-%m-%d %H:%M:%S")
            echo "finished ($begin_time ... $end_time)"

# `mc mirror` FLAGS:
#  --overwrite                        overwrite object(s) on target if it differs from source
#  --dry-run                          perform a fake mirror operation
#  --watch, -w                        watch and synchronize changes
#  --remove                           remove extraneous object(s) on target
#  --region value                     specify region when creating new bucket(s) on target (default: "us-east-1")
#  --preserve, -a                     preserve file(s)/object(s) attributes and bucket(s) policy/locking configuration(s) on target bucket(s)
#  --md5                              force all upload(s) to calculate md5sum checksum
#  --active-active                    enable active-active multi-site setup
#  --disable-multipart                disable multipart upload feature
#  --exclude value                    exclude object(s) that match specified object name pattern
#  --older-than value                 filter object(s) older than value in duration string (e.g. 7d10h31s)
#  --newer-than value                 filter object(s) newer than value in duration string (e.g. 7d10h31s)
#  --storage-class value, --sc value  specify storage class for new object(s) on target
#  --encrypt value                    encrypt/decrypt objects (using server-side encryption with server managed keys)
#  --attr value                       add custom metadata for all objects
#  --monitoring-address value         if specified, a new prometheus endpoint will be created to report mirroring activity. (eg: localhost:8081)
#  --encrypt-key value                encrypt/decrypt objects (using server-side encryption with customer provided keys)
#  --config-dir value, -C value       path to configuration folder (default: "/root/.mc")
#  --quiet, -q                        disable progress bar display
#  --no-color                         disable color theme
#  --json                             enable JSON lines formatted output
#  --debug                            enable debug output
#  --insecure                         disable SSL certificate verification
#  --limit-upload value               limits uploads to a maximum rate in KiB/s, MiB/s, GiB/s. (default: unlimited)
#  --limit-download value             limits downloads to a maximum rate in KiB/s, MiB/s, GiB/s. (default: unlimited)
#  --help, -h                         show help
