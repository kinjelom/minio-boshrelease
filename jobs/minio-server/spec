---
name: minio-server
templates:
  bin/ctl.sh.erb: bin/ctl
  bin/create-policies-files.sh.erb: bin/create-policies-files.sh
  bin/post-start.sh.erb: bin/post-start
  bin/mctl.sh.erb: bin/mctl
  bin/health_check.sh.erb: bin/health_check.sh
  config/config.env.erb: config/config.env
  config/certs/CAs/ca.crt.erb: config/certs/CAs/ca.crt
  config/certs/public.crt.erb: config/certs/public.crt
  config/certs/private.key.erb: config/certs/private.key
  config/certs/kes/kes-server-ca.crt.erb: config/certs/kes/kes-server-ca.crt
  config/certs/kes/kes-client-admin.crt.erb: config/certs/kes/kes-client-admin.crt
  config/certs/kes/kes-client-admin.key.erb: config/certs/kes/kes-client-admin.key
  dns/aliases.json.erb: dns/aliases.json

packages:
  - minio
  - mc
  - jq

consumes:
  - name: minio-server
    type: server
  - name: kes-tls-config
    type: kes-tls-config
    optional: true
    properties:
      - port
      - tls.certs.kes_server.ca
      - tls.certs.kes_client_admin.certificate
      - tls.certs.kes_client_admin.private_key

provides:
  - name: minio-server
    type: server
    properties:
      - port
      - credential.root_user
      - credential.root_password
      - tls.enable
      - tls.certs.server_certificate
      - tls.certs.server_ca
      - dns.alias

properties:
  monit_startup_timeout_sec:
    description: "Number of seconds that monit should wait for minio to start before giving up"
    default: 180
  port:
    description: "The port on which the Minio server should bind"
    default: 9000
  console_port:
    description: "The port on which the Minio Console UI should bind"
    default: 9001
  credential.root_user:
    description: "The access key for the root user. Access key length should be at least 3 characters"
    default: ~
  credential.root_password:
    description: "The secret key for the root user. The secret key length should be at least 8 characters"
    default: ~
  apply_provided_local_kes_config:
    description: "If true, MINIO_KMS_KES_KEY_NAME, MINIO_KMS_KES_ENDPOINT, MINIO_KMS_KES_CAPATH, MINIO_KMS_KES_KEY_FILE, and MINIO_KMS_KES_CERT_FILE will be set using the properties provided by the KES server and the localhost address. These can still be overridden by explicit server_config settings."
    default: false
  server_config:
    description: "Config entries the MinIO server process uses for loading environment variables: https://min.io/docs/minio/linux/reference/minio-server/minio-server.html"
    example:
      MINIO_BROWSER_REDIRECT_URL: "https://minio-console.uri"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
      MINIO_PROMETHEUS_URL: "http://q-s0.prometheus2.default.prometheus.bosh:9090"
      MINIO_PROMETHEUS_JOB_ID: "minio-deployment-name"
    default: ~
  tls.enable:
    description: Enabling MinIO Transport Layer Security (TLS) encryption of incoming and outgoing traffic.
    default: false
  tls.certs.server_ca:
    description: |
      PEM-encoded certificate used to sign the certificates of the other Minio nodes.
      Required if `server_certificate` is specified and `server_certificate` was signed by a third-party CA.
    default: ~
  tls.certs.server_certificate:
    description: |
      PEM-encoded certificate for the Minio server. When set, nodes will communicate with each other over HTTPS rather than HTTP.
      See 'dns.alias' property below for hostname information.
    default: ~
  tls.certs.server_private_key:
    description: |
      PEM-encoded private key for the Minio server.
    default: ~
  dns.alias:
    description: |
      When set, the nodes in the minio cluster will communicate with each other using '$NODE_ID.$DNS_ALIAS' as the hostname.
      HTTPS certs should use this domain as the Common Name plus a wildcard Subject Alt Name, e.g. 'minio-server.service.cf.internal' and '*.minio-server.service.cf.internal'.
      This is a temporary workaround until BOSH DNS supports autogenerated certs for BOSH DNS records.
    example: "minio-server.service.cf.internal"
    default: ~
  admin.policies:
    description: |
      Policies to create at startup, MinIO [built-in polices](https://min.io/docs/minio/linux/administration/identity-access-management/policy-based-access-control.html#id3):
      - consoleAdmin
      - readonly
      - readwrite
      - diagnostics
      - writeonly
    example:
      mirrorReader: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:ListBucket", "s3:GetBucketLocation", "s3:GetBucketPolicy", "s3:GetBucketPolicyStatus", "s3:GetObject"],
              "Resource": ["arn:aws:s3:::*"]
            }
          ]
        }
  admin.access:
    description: Access to grant at startup
    example:
      admin:
        secret_key: admin_secret
        policy_name: consoleAdmin # builtin
      mirror_reader:
        secret_key: mirror_reader_secret
        policy_name: mirrorReader # custom policy

